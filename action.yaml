---
name: "Scality SBOM Action"
description: "Creates an SBOM (Software Bill Of Materials) from your code, and artifacts."
author: "Scality"
branding:
  color: blue
  icon: shield
inputs:
  grype_version:
    description: "The version of grype to use"
    required: false

  syft_version:
    description: "The version of syft to use"
    required: false

  target:
    description: "The target to scan"
    required: true

  target_type:
    description: "The type of target to scan"
    required: false
    options:
      - file
      - image
      - iso

  output_format:
    description: "The SBOM format to export"
    required: false
    options:
      - cyclonedx-json
      - cyclonedx-xml
      - spdx-json
      - spdx

  output_file:
    description: "A file location to store the SBOM"
    required: false

  output_dir:
    description: "A directory location to store the SBOM"
    required: false

  exclude_mediatypes:
    description: "Exclude specific media types from the SBOM"
    required: false

  distro:
    description: "The Linux distribution of the target, if not detected"
    required: false

  name:
    description: "The name of the target, if not detected"
    required: false

  version:
    description: "The version of the target, if not detected"
    required: false

  vuln:
    description: "Check for vulnerabilities"
    required: false
    type: boolean

  vuln_output_format:
    description: "Vulnerability output format"
    required: false
    options:
      - json
      - table
      - sarif
      - cyclonedx-json
      - cyclonedx
      - html
      - junit

  vuln_output_file:
    description: "A file location to store the vulnerability report"
    required: false

runs:
  using: "composite"
  steps:
    - name: Install Python 3
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        cache: "pip"

    - name: Install python deps
      shell: bash
      run: |
        if [ -f "${{ github.action_path }}/requirements.txt" ]; then
          pip install -r "${{ github.action_path }}/requirements.txt"
        else
          echo "No requirements.txt found; skipping Python dependencies installation."
        fi

    - name: Install dependencies
      shell: bash
      run: |
          export DEBIAN_FRONTEND=noninteractive && \
          sudo apt-get update && \
          sudo apt-get install --no-install-recommends -y \
          file \
          jq \
          p7zip-full \
          python3-setuptools

    - name: Install scanners
      shell: bash
      env:
        INPUT_GRYPE_VERSION: ${{ inputs.grype_version }}
        INPUT_SYFT_VERSION: ${{ inputs.syft_version }}
      run: python3 ${{ github.action_path }}/src/main.py install

    - name: Run the scan
      shell: bash
      env:
        INPUT_TARGET: ${{ inputs.target }}
        INPUT_TARGET_TYPE: ${{ inputs.target_type }}
        INPUT_OUTPUT_FORMAT: ${{ inputs.output_format }}
        INPUT_OUTPUT_FILE: ${{ inputs.output_file }}
        INPUT_OUTPUT_DIR: ${{ inputs.output_dir }}
        INPUT_EXCLUDE_MEDIATYPES: ${{ inputs.exclude_mediatypes }}
        INPUT_DISTRO: ${{ inputs.distro }}
        INPUT_NAME: ${{ inputs.name }}
        INPUT_VERSION: ${{ inputs.version }}
        INPUT_VULN: ${{ inputs.vuln }}
        INPUT_VULN_OUTPUT_FORMAT: ${{ inputs.vuln_output_format }}
        INPUT_VULN_OUTPUT_FILE: ${{ inputs.vuln_output_file }}
      run: python3 ${{ github.action_path }}/src/main.py scan
