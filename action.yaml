name: "Generate sbom"
description: "Generate sbom from git repositories"

inputs:
  repo:
    description: "repository to scan"
    default: ${{ github.repository }}
    required: false
  input_path:
    description: "path to the repository"
    required: true
  output_path:
    description: "path to store the sbom"
    required: true
  generate_vulnerability_report:
    description: "generate vulnerability report"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:

    - name: Install deps
      shell: bash
      run: |
        export DEBIAN_FRONTEND=noninteractive && \
        sudo apt-get update && \
        sudo apt-get install --no-install-recommends -y \
        git

    - name: Install syft
      shell: bash
      run: |
        export DEBIAN_FRONTEND=noninteractive && \
        curl -O -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh && \
        sudo sh install.sh -b /usr/local/bin

    - name: Install grype
      if: ${{ inputs.generate_vulnerability_report == 'true' }}
      shell: bash
      run: |
        export DEBIAN_FRONTEND=noninteractive && \
        curl -O -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh && \
        sudo sh install.sh -b /usr/local/bin

    - name: Generate sbom for python
      shell: bash
      run: |
        syft --select-catalogers "python" -o cyclonedx-json=${{ inputs.output_path }}/repo_${{ inputs.repo }}\_python.json ${{ inputs.input_path }}

    - name: Generate sbom for javascript
      shell: bash
      run: |
        syft --select-catalogers "javascript" -o cyclonedx-json=${{ inputs.output_path }}/repo_${{ inputs.repo }}\_javascript.json ${{ inputs.input_path }}

    - name: Generate sbom for go
      shell: bash
      run: |
        syft --select-catalogers "go" -o cyclonedx-json=${{ inputs.output_path }}/repo_${{ inputs.repo }}\_go.json ${{ inputs.input_path }}

    - name: Generate sbom for github actions
      shell: bash
      run: |
        syft --select-catalogers "github-actions" -o cyclonedx-json=${{ inputs.output_path }}/repo_${{ inputs.repo }}\_github-actions.json ${{ inputs.input_path }}/.github/

    - name: Generate vulnerability report
      if: ${{ inputs.generate_vulnerability_report == 'true' }}
      shell: bash
      run: |
        for i in `find ${{ inputs.output_path }} -maxdepth 1 -name "*.json"`; do
          grype $i -o template -t templates/html-table.tmpl > ${{ inputs.output_path }}/$i\_vulnerabilities.html
          grype $i -o json > ${{ inputs.output_path }}/$i\_vulnerabilities.json
        done
